"use strict";(self.webpackChunknewra=self.webpackChunknewra||[]).push([[849],{1433:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=n(4848),o=n(8453);const i={sidebar_position:5},r="Document",a={id:"knowledgebases/datasources/types/DocumentScrapping",title:"Document",description:"Route Directory",source:"@site/docs/knowledgebases/datasources/types/DocumentScrapping.md",sourceDirName:"knowledgebases/datasources/types",slug:"/knowledgebases/datasources/types/DocumentScrapping",permalink:"/newra_documentation/docs/knowledgebases/datasources/types/DocumentScrapping",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/knowledgebases/datasources/types/DocumentScrapping.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Text",permalink:"/newra_documentation/docs/knowledgebases/datasources/types/TextScrapping"},next:{title:"Introduction",permalink:"/newra_documentation/docs/knowledgebases/datasources/types/WebScrapping/flow"}},c={},d=[{value:"Route Directory",id:"route-directory",level:2},{value:"Code Explanation:",id:"code-explanation",level:2},{value:"Function Details",id:"function-details",level:3},{value:"<code>readFileContents(string $filename, string $fileExtension)</code>",id:"readfilecontentsstring-filename-string-fileextension",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"document",children:"Document"}),"\n",(0,s.jsx)(t.h2,{id:"route-directory",children:"Route Directory"}),"\n",(0,s.jsxs)(t.p,{children:["For routes connected to the Datasource module reference the path ",(0,s.jsx)(t.code,{children:"newra/web/Modules/DocumentScrapping/Routes/web.php"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"code-explanation",children:"Code Explanation:"}),"\n",(0,s.jsx)(t.h3,{id:"function-details",children:"Function Details"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"store(StoreDocumentDataSourceRequest $request)"})," method handles the actual process of storing a newly created resource in storage. Key aspects of the method include:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Managing the user's storage token data based on their active subscription details."}),"\n",(0,s.jsx)(t.li,{children:"It loops through all the documents provided in the request."}),"\n",(0,s.jsxs)(t.li,{children:["Skips unsupported file types and reads the content of the supported ones using the ",(0,s.jsx)(t.code,{children:"readFileContents"})," method."]}),"\n",(0,s.jsxs)(t.li,{children:["It calculates the token count needed for the document content using ",(0,s.jsx)(t.code,{children:"TokenizerX"}),". If the required tokens exceed the user\u2019s remaining storage tokens, it skips the document."]}),"\n",(0,s.jsxs)(t.li,{children:["It then creates a datasource for each document via ",(0,s.jsx)(t.code,{children:"DatasourceService::createFromText"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["If the datasource is successfully created and ",(0,s.jsx)(t.code,{children:"auto_train"})," is enabled for it, a new ",(0,s.jsx)(t.code,{children:"TrainDataSourceJob"})," is dispatched."]}),"\n",(0,s.jsx)(t.li,{children:"At the end, it deletes the document from the storage."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"readfilecontentsstring-filename-string-fileextension",children:(0,s.jsx)(t.code,{children:"readFileContents(string $filename, string $fileExtension)"})}),"\n",(0,s.jsxs)(t.p,{children:["This function reads the contents of a file using ",(0,s.jsx)(t.code,{children:"FileReaderService"}),". It determines the file reader method based on the file extension."]}),"\n",(0,s.jsxs)(t.p,{children:["In summary, ",(0,s.jsx)(t.code,{children:"DocumentScrappingController"})," mainly facilitates rendering an upload form, reading the document contents, and creating a datasource from those documents. If configured, it also triggers an auto-training job for each datasource. The flow is designed around managing the storage token and file type restrictions and handling successful datasource creation and optional trigger of training jobs."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);